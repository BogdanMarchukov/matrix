//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::CalculatorType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "calculator")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub calculator_id: Uuid,
    #[sea_orm(unique)]
    pub r#type: CalculatorType,
    pub require_params: Option<Vec<String>>,
    pub options_params: Option<Vec<String>>,
    #[sea_orm(unique)]
    pub offer_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::offer::Entity",
        from = "Column::OfferId",
        to = "super::offer::Column::OfferId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Offer,
    #[sea_orm(has_many = "super::user_calc_result::Entity")]
    UserCalcResult,
}

impl Related<super::offer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Offer.def()
    }
}

impl Related<super::user_calc_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCalcResult.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

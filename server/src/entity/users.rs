//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use super::sea_orm_active_enums::UserRoleType;
use crate::errors::gql_error::GqlError;
use async_graphql::SimpleObject;
use async_graphql::*;
use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
#[derive(SimpleObject)]
#[graphql(name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    #[sea_orm(unique)]
    pub telegram_id: i64,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub username: Option<String>,
    pub language_code: Option<String>,
    pub is_premium: Option<bool>,
    pub photo_url: Option<String>,
    pub role: UserRoleType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn check_role(&self, user_id: Uuid) -> FieldResult<&Self> {
        let allowed = match &self.role {
            UserRoleType::Owner => true,
            UserRoleType::Admin => true,
            UserRoleType::Member => &self.user_id == &user_id,
        };
        if allowed == true {
            Ok(&self)
        } else {
            Err(GqlError::Forbidden.into())
        }
    }
}
